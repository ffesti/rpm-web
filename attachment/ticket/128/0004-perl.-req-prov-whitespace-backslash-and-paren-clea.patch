From b4b75405b24bd28d96fb0db857900f86a79a1d57 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Ville=20Skytt=C3=A4?= <ville.skytta@iki.fi>
Date: Sun, 24 Jan 2010 13:42:46 +0200
Subject: [PATCH 4/4] perl.{req,prov} whitespace, backslash and paren cleanups.

---
 scripts/perl.prov |   50 +++++++++++++++++++-------------------
 scripts/perl.req  |   68 ++++++++++++++++++++++++++--------------------------
 2 files changed, 59 insertions(+), 59 deletions(-)

diff --git a/scripts/perl.prov b/scripts/perl.prov
index 103488c..4d5bd81 100755
--- a/scripts/perl.prov
+++ b/scripts/perl.prov
@@ -81,13 +81,13 @@ sub process_file {
 
   my ($file) = @_;
   chomp $file;
-  
+
   open(FILE, "<$file") || return;
 
   my ($package, $version, $incomment, $inover) = ();
 
   while (<FILE>) {
-    
+
     # skip the documentation
 
     # we should not need to have item in this if statement (it
@@ -102,7 +102,7 @@ sub process_file {
       $incomment = 0;
       $inover = 0;
     }
-    
+
     if (m/^=(over)/) {
       $inover = 1;
     }
@@ -114,7 +114,7 @@ sub process_file {
     if ($incomment || $inover) {
        next;
     }
-    
+
     # skip the data section
     if (m/^__(DATA|END)__$/) {
       last;
@@ -125,7 +125,7 @@ sub process_file {
     # false positives as if they were provided packages (really ugly).
 
     if (m/^\s*package\s+([_:a-zA-Z0-9]+)\s*;/) {
-      $package=$1;
+      $package = $1;
       undef $version;
       if ($package eq 'main') {
         undef $package;
@@ -134,7 +134,7 @@ sub process_file {
         # the package definition is broken up over multiple blocks.
         # In that case, don't stomp a previous $VERSION we might have
         # found.  (See BZ#214496.)
-        $require{$package}=undef unless (exists $require{$package});
+        $require{$package} = undef unless (exists $require{$package});
       }
     }
 
@@ -149,44 +149,44 @@ sub process_file {
     #CGI/Apache.pm:$VERSION = (qw$Revision: 1.9 $)[1];
     #DynaLoader.pm:$VERSION = $VERSION = "1.03";     # avoid typo warning
     #General.pm:$Config::General::VERSION = 2.33;
-    # 
+    #
     # or with the new "our" pragma you could (read will) see:
     #
     #    our $VERSION = '1.00'
-    if (($package) && (m/^\s*(our\s+)?\$(\Q$package\E::)?VERSION\s*=\s+/)) {
+    if ($package && m/^\s*(our\s+)?\$(\Q$package\E::)?VERSION\s*=\s+/) {
 
       # first see if the version string contains the string
       # '$Revision' this often causes bizzare strings and is the most
       # common method of non static numbering.
 
       if (m/(\$Revision: (\d+[.0-9]+))/) {
-	$version= $2; 
-      } elsif (m/[\'\"]?(\d+[.0-9]+)[\'\"]?/) {
-	
-	# look for a static number hard coded in the script
-	
-	$version= $1; 
+        $version = $2;
+      } elsif (m/['"]?(\d+[.0-9]+)['"]?/) {
+
+        # look for a static number hard coded in the script
+
+        $version = $1;
       }
-      $require{$package}=$version;
+      $require{$package} = $version;
     }
-  
+
     # Allow someone to have a variable that defines virtual packages
-    # The variable is called $RPM_Provides.  It must be scoped with 
-    # "our", but not "local" or "my" (just would not make sense). 
-    # 
+    # The variable is called $RPM_Provides.  It must be scoped with
+    # "our", but not "local" or "my" (just would not make sense).
+    #
     # For instance:
-    #  
+    #
     #     $RPM_Provides = "blah bleah"
-    # 
+    #
     # Will generate provides for "blah" and "bleah".
     #
     # Each keyword can appear multiple times.  Don't
     #  bother with datastructures to store these strings,
     #  if we need to print it print it now.
-	
-    if ( m/^\s*(our\s+)?\$RPM_Provides\s*=\s*["'](.*)['"]/i) {
+
+    if (m/^\s*(our\s+)?\$RPM_Provides\s*=\s*["'](.*)['"]/i) {
       foreach $_ (split(/\s+/, $2)) {
-	print "$_\n";
+        print "$_\n";
       }
     }
 
@@ -195,5 +195,5 @@ sub process_file {
   close(FILE) ||
     die("$0: Could not close file: '$file' : $!\n");
 
-  return ;
+  return;
 }
diff --git a/scripts/perl.req b/scripts/perl.req
index 28ff782..9d609fa 100755
--- a/scripts/perl.req
+++ b/scripts/perl.req
@@ -1,6 +1,6 @@
 #!/usr/bin/perl
 
-# RPM (and its source code) is covered under two separate licenses. 
+# RPM (and its source code) is covered under two separate licenses.
 
 # The entire code base may be distributed under the terms of the GNU
 # General Public License (GPL), which appears immediately below.
@@ -18,7 +18,7 @@
 # Erik Troan <ewt@redhat.com>.
 
 # a simple makedepend like script for perl.
- 
+
 # To save development time I do not parse the perl grammmar but
 # instead just lex it looking for what I want.  I take special care to
 # ignore comments and pod's.
@@ -44,10 +44,10 @@ if ("@ARGV") {
     process_file($_);
   }
 } else {
-  
+
   # notice we are passed a list of filenames NOT as common in unix the
   # contents of the file.
-  
+
   foreach (<>) {
     process_file($_);
   }
@@ -72,18 +72,18 @@ exit 0;
 
 
 sub process_file {
-  
+
   my ($file) = @_;
   chomp $file;
-  
+
   open(FILE, "<$file") || return;
-  
+
   while (<FILE>) {
-    
+
     # skip the "= <<" block
 
-    if ( ( m/^\s*\$(?:.*)\s*=\s*<<\s*(["'`])(.*)\1/) ||
-         ( m/^\s*\$(.*)\s*=\s*<<(\w*)\s*;/) ) {
+    if (m/^\s*\$(?:.*)\s*=\s*<<\s*(["'`])(.*)\1/ ||
+        m/^\s*\$(.*)\s*=\s*<<(\w*)\s*;/) {
       $tag = $2;
       while (<FILE>) {
         chomp;
@@ -95,7 +95,7 @@ sub process_file {
     # skip q{} quoted sections - just hope we don't have curly brackets
     # within the quote, nor an escaped hash mark that isn't a comment
     # marker, such as occurs right here. Draw the line somewhere.
-    if ( m/^.*\Wq[qxwr]?\s*([\{\(\[#|\/])[^})\]#|\/]*$/ && ! m/^\s*(require|use)\s/ ) {
+    if ( m/^.*\Wq[qxwr]?\s*([{([#|\/])[^})\]#|\/]*$/ && ! m/^\s*(require|use)\s/ ) {
       $tag = $1;
       $tag =~ tr/{\(\[\#|\//})]#|\//;
       while (<FILE>) {
@@ -116,7 +116,7 @@ sub process_file {
     if ( (m/^=(over)/) .. (m/^=(back)/) ) {
       next;
     }
-    
+
     # skip the data section
     if (m/^__(DATA|END)__$/) {
       last;
@@ -126,14 +126,14 @@ sub process_file {
     #  bother with datastructures to store these strings,
     #  if we need to print it print it now.
     #
-	# Again allow for "our".
-    if ( m/^\s*(our\s+)?\$RPM_Requires\s*=\s*["'](.*)['"]/i) {
+        # Again allow for "our".
+    if (m/^\s*(our\s+)?\$RPM_Requires\s*=\s*["'](.*)['"]/i) {
       foreach $_ (split(/\s+/, $2)) {
-	print "$_\n";
+        print "$_\n";
       }
     }
 
-    if ( 
+    if (
 
 # ouch could be in a eval, perhaps we do not want these since we catch
 # an exception they must not be required
@@ -143,13 +143,13 @@ sub process_file {
 #   eval { require Carp } if defined $^S; # If error/warning during compilation,
 
 
-	(m/^(\s*)         # we hope the inclusion starts the line
-	 (require|use)\s+(?!\{)     # do not want 'do {' loops
-	 # quotes around name are always legal
-	 [\'\"]?([^\;\ \'\"\t#]*)[\'\"]?[\t\;\ ]
-	 # the syntax for 'use' allows version requirements
-	 \s*([.0-9]*)
-	 /x)
+        (m/^(\s*)         # we hope the inclusion starts the line
+         (require|use)\s+(?!\{)     # do not want 'do {' loops
+         # quotes around name are always legal
+         ['"]?([^; '"\t#]*)['"]?[\t; ]
+         # the syntax for 'use' allows version requirements
+         \s*([.0-9]*)
+         /x)
        ) {
       my ($whitespace, $statement, $module, $version) = ($1, $2, $3,$4);
 
@@ -163,7 +163,7 @@ sub process_file {
       # if there is some interpolation of variables just skip this
       # dependency, we do not want
       #        do "$ENV{LOGDIR}/$rcfile";
-   
+
       ($module =~ m/\$/) && next;
 
       # skip if the phrase was "use of" -- shows up in gimp-perl, et al.
@@ -195,7 +195,7 @@ sub process_file {
 
       $module =~ s/\.pm$//;
 
-      # some perl programmers write 'require URI/URL;' when 
+      # some perl programmers write 'require URI/URL;' when
       # they mean 'require URI::URL;'
 
       $module =~ s/\//::/;
@@ -209,7 +209,7 @@ sub process_file {
       # if module is a number then both require and use interpret that
       # to mean that a particular version of perl is specified
 
-      my $ver=$1;
+      my $ver = $1;
       if ($ver =~ /5.00/) {
         print "perl >= 0:$ver\n";
         next;
@@ -223,10 +223,10 @@ sub process_file {
 
       # ph files do not use the package name inside the file.
       # perlmodlib documentation says:
-      
+
       #       the .ph files made by h2ph will probably end up as
       #       extension modules made by h2xs.
-      
+
       # so do not expend much effort on these.
 
 
@@ -234,16 +234,16 @@ sub process_file {
       # will be included with the name sys/systeminfo.ph so only use the
       # basename of *.ph files
 
-      ($module  =~ m/\.ph$/) && next;
+      ($module =~ m/\.ph$/) && next;
 
-      $require{$module}=$version;
-      $line{$module}=$_;
+      $require{$module} = $version;
+      $line{$module} = $_;
     }
-    
+
   }
 
   close(FILE) ||
     die("$0: Could not close file: '$file' : $!\n");
-  
-  return ; 
+
+  return;
 }
-- 
1.6.2.5

